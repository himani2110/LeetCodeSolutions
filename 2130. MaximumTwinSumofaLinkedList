class Solution {
    public ListNode reverseList(ListNode head){
        ListNode prev = null;
        ListNode curr = head;
        while(curr != null){
            ListNode nextNode = curr.next;
            curr.next = prev;
            prev = curr;
            curr = nextNode;
        }
        return prev;
    }
    public ListNode findMiddle(ListNode head){
        ListNode fast = head;
        ListNode slow = head;
        while(fast != null && fast.next != null){
            fast = fast.next.next;
            slow = slow.next;
        }
        return slow;
    }
    public int pairSum(ListNode head) {
        if(head.next.next == null){
            return head.val + head.next.val;
        }
        ListNode middle = findMiddle(head);
        ListNode secondHead = reverseList(middle);
        int max = 0;
        while(secondHead != null){
            int temp = secondHead.val + head.val;
            if(max < temp){
                max = temp;
            }
            secondHead = secondHead.next;
            head = head.next;
        }
        return max;
    }
}
