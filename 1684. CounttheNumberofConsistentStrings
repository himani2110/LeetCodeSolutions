/*class Solution {
    public int countConsistentStrings(String allowed, String[] words) {
       HashSet<Character> set = new HashSet<Character>();
       int count = 0;
       for(int i = 0; i < allowed.length(); i++){
           set.add(allowed.charAt(i));
       } 
    //    boolean flag = false;
       for(int i = 0; i < words.length; i++){
           String temp = words[i];
           int countOne = 0;
           for(int j = 0; j < temp.length(); j++){
               if(set.contains(temp.charAt(j)));
               else{
                   countOne++;
               }
           }
           if(countOne == 0){
               count++;
           }
       }
       return count;
    }
}*/

OR

class Solution {
    public int countConsistentStrings(String allowed, String[] words) {
        int count = 0;
        int flag = 0;
        for(int i = 0; i < words.length; i++){
            String temp = words[i];
            for(int j = 0; j < temp.length(); j++){
                for(int k = 0; k < allowed.length(); k++){
                    if(temp.charAt(j) == allowed.charAt(k)){
                        flag = 0;
                        break;
                    }
                    else{
                        flag = flag + 1;
                    }
                }
                if(flag > 0){
                    break;
                }
            }
            if(flag == 0){
                    count++;
            }
            flag = 0;
        }
        return count;
    }
}
