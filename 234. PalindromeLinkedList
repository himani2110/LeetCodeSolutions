class Solution {
    public ListNode reverseList(ListNode head){
        ListNode prev = null;
        ListNode curr = head;
        while(curr != null){
            ListNode nextNode = curr.next;
            curr.next = prev;
            prev = curr;
            curr = nextNode;
        }
        return prev;
    }
    public ListNode findMiddle(ListNode head){
        ListNode fast = head;
        ListNode slow = head;
        while(fast.next != null && fast.next.next != null){
            fast = fast.next.next;
            slow = slow.next;
        }
        return slow;
    }
    public boolean isPalindrome(ListNode head) {
        if(head == null || head.next == null){
            return true;
        }
        ListNode curr = head;
        ListNode middle = findMiddle(head);
        ListNode secondHead = reverseList(middle);
        while(secondHead.next != null){
            if(curr.val != secondHead.val){
                return false;
            }
            else{
                curr = curr.next;
                secondHead = secondHead.next;
            }
        }
        return true;
    }
}
